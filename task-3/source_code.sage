# The source code used during the assignment.
def magically_break_all_ecdlps():
	curves = [
		[299533032484851216427287765954924172289, 299533032484851216427287765361390629365, 299533032484851216427112106141694556945, 5085147874087948790308540567427778936, 222617595416445841782067374203539103294, 252069544411394152572094131929464245539, 95695860203904438243538387745024235366],
		# [340282366762482138434845932244680310783, 340282366762482138434845932244680310780, 308990863222245658030922601041482374867, 266573234109250503578160318953897632613, 335918163949341064371871135662925632431, 48885335108620255201116771375821574209, 97098301964623064324174212714666181670],
		[271874730946668171887236756550588970607, 271874730946668171887236755957055427683, 271874730946668171887061096737359355263, 61365236281390194119565222418780565842, 106473920432428160857006107743477021516, 271296417462382409374914106211049944450, 0],
		[189738459948332700555843505240325044907, 189738459948332700555843504646791501983, 189738459948332700555667845427095429563, 136555202985890190458022346625659412622, 45219491120624278482340380861092896414, 101379496996508861760960521929562081073, 177486493830805957372699764357020396279],
	]

	for curve in curves:
		p = curve[0]
		K = GF(p)
		a = K(curve[1])
		b = K(curve[2])
		E = EllipticCurve(K, (a,b))
		P = E(curve[3], curve[4])
		Q = E(curve[5], curve[6])

		print("")
		print("P is", P)
		print("Q is", Q)
		print("is singular", E.is_singular())
		print("is supersingular", E.is_supersingular())
		print("Q order is", Q.order())
		print("P order is", P.order())
		print("Q order is 2", Q.order() == 2)
		print("group is", K)
		print("factor p is", factor(p))
		print("factor P is", factor(P.order()))
		print("factor Q is", factor(Q.order()))
		print("subgroup P is", P.order())
		print("d is", discrete_log(Q, P, None, operation='+'))

magically_break_all_ecdlps()