

# This file was *autogenerated* from the file code_445662/source_code.sage
from sage.all_cmdline import *   # import sage library

_sage_const_299533032484851216427287765954924172289 = Integer(299533032484851216427287765954924172289); _sage_const_299533032484851216427287765361390629365 = Integer(299533032484851216427287765361390629365); _sage_const_299533032484851216427112106141694556945 = Integer(299533032484851216427112106141694556945); _sage_const_5085147874087948790308540567427778936 = Integer(5085147874087948790308540567427778936); _sage_const_222617595416445841782067374203539103294 = Integer(222617595416445841782067374203539103294); _sage_const_252069544411394152572094131929464245539 = Integer(252069544411394152572094131929464245539); _sage_const_95695860203904438243538387745024235366 = Integer(95695860203904438243538387745024235366); _sage_const_271874730946668171887236756550588970607 = Integer(271874730946668171887236756550588970607); _sage_const_271874730946668171887236755957055427683 = Integer(271874730946668171887236755957055427683); _sage_const_271874730946668171887061096737359355263 = Integer(271874730946668171887061096737359355263); _sage_const_61365236281390194119565222418780565842 = Integer(61365236281390194119565222418780565842); _sage_const_106473920432428160857006107743477021516 = Integer(106473920432428160857006107743477021516); _sage_const_271296417462382409374914106211049944450 = Integer(271296417462382409374914106211049944450); _sage_const_0 = Integer(0); _sage_const_189738459948332700555843505240325044907 = Integer(189738459948332700555843505240325044907); _sage_const_189738459948332700555843504646791501983 = Integer(189738459948332700555843504646791501983); _sage_const_189738459948332700555667845427095429563 = Integer(189738459948332700555667845427095429563); _sage_const_136555202985890190458022346625659412622 = Integer(136555202985890190458022346625659412622); _sage_const_45219491120624278482340380861092896414 = Integer(45219491120624278482340380861092896414); _sage_const_101379496996508861760960521929562081073 = Integer(101379496996508861760960521929562081073); _sage_const_177486493830805957372699764357020396279 = Integer(177486493830805957372699764357020396279); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6)# The source code used during the assignment.
def magically_break_all_ecdlps():
	curves = [
		[_sage_const_299533032484851216427287765954924172289 , _sage_const_299533032484851216427287765361390629365 , _sage_const_299533032484851216427112106141694556945 , _sage_const_5085147874087948790308540567427778936 , _sage_const_222617595416445841782067374203539103294 , _sage_const_252069544411394152572094131929464245539 , _sage_const_95695860203904438243538387745024235366 ],
		# [340282366762482138434845932244680310783, 340282366762482138434845932244680310780, 308990863222245658030922601041482374867, 266573234109250503578160318953897632613, 335918163949341064371871135662925632431, 48885335108620255201116771375821574209, 97098301964623064324174212714666181670],
		[_sage_const_271874730946668171887236756550588970607 , _sage_const_271874730946668171887236755957055427683 , _sage_const_271874730946668171887061096737359355263 , _sage_const_61365236281390194119565222418780565842 , _sage_const_106473920432428160857006107743477021516 , _sage_const_271296417462382409374914106211049944450 , _sage_const_0 ],
		[_sage_const_189738459948332700555843505240325044907 , _sage_const_189738459948332700555843504646791501983 , _sage_const_189738459948332700555667845427095429563 , _sage_const_136555202985890190458022346625659412622 , _sage_const_45219491120624278482340380861092896414 , _sage_const_101379496996508861760960521929562081073 , _sage_const_177486493830805957372699764357020396279 ],
	]

	for curve in curves:
		p = curve[_sage_const_0 ]
		K = GF(p)
		a = K(curve[_sage_const_1 ])
		b = K(curve[_sage_const_2 ])
		E = EllipticCurve(K, (a,b))
		P = E(curve[_sage_const_3 ], curve[_sage_const_4 ])
		Q = E(curve[_sage_const_5 ], curve[_sage_const_6 ])

		print("")
		print("P is", P)
		print("Q is", Q)
		print("is singular", E.is_singular())
		print("is supersingular", E.is_supersingular())
		print("Q order is", Q.order())
		print("P order is", P.order())
		print("Q order is 2", Q.order() == _sage_const_2 )
		print("group is", K)
		print("factor p is", factor(p))
		print("factor P is", factor(P.order()))
		print("factor Q is", factor(Q.order()))
		print("subgroup P is", P.order())
		print("d is", discrete_log(Q, P, None, operation='+'))

magically_break_all_ecdlps()

